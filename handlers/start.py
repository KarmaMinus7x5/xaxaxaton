"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start –∏ /reset
"""
from aiogram import types, F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from database.database import async_session
from database.crud import get_user, delete_user_data
from keyboards.inline import get_start_keyboard, get_main_menu_keyboard

router = Router()


@router.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await state.clear()

    async with async_session() as session:
        user = await get_user(session, str(message.from_user.id))

        if user:
            await message.answer(
                f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.full_name}! üëã\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_main_menu_keyboard(),
                parse_mode="HTML"
            )
        else:
            await message.answer(
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>MentorMatch</b>!\n\n"
                "–≠—Ç–æ –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–µ–Ω—Ç–æ—Ä–æ–≤ –∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.\n"
                "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –æ–ø—ã—Ç–Ω–æ–≥–æ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞ –∏–ª–∏ —Ç–∞–ª–∞–Ω—Ç–ª–∏–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–∞–º–∏.\n\n"
                "–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?",
                reply_markup=get_start_keyboard(),
                parse_mode="HTML"
            )


@router.callback_query(F.data == "start_registration")
async def start_registration_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ù–∞—á–∞—Ç—å"""
    from keyboards.inline import get_role_keyboard
    from states.states import RegistrationStates

    await callback.message.edit_text(
        "–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –≤–∞—à—É –∞–Ω–∫–µ—Ç—É.\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:",
        reply_markup=get_role_keyboard()
    )
    await callback.answer()
    await callback.message.bot.state.set_state(callback.from_user.id, RegistrationStates.choosing_role, callback.message.chat.id)


@router.callback_query(F.data == "main_menu")
async def show_main_menu(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()

    async with async_session() as session:
        user = await get_user(session, str(callback.from_user.id))

        if user:
            await callback.message.edit_text(
                "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=get_main_menu_keyboard()
            )
        else:
            await callback.message.edit_text(
                "–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n"
                "–•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å?",
                reply_markup=get_start_keyboard()
            )
    await callback.answer()


@router.message(Command("reset"))
async def cmd_reset(message: types.Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
    async with async_session() as session:
        if await delete_user_data(session, message.from_user.id):
            await message.answer(
                "‚úÖ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã.\n"
                "–•–æ—Ç–∏—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ?",
                reply_markup=get_start_keyboard()
            )
        else:
            await message.answer("–ù–µ—á–µ–≥–æ —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å.")
    await state.clear()
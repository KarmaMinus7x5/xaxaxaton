"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""
from aiogram import types, F, Router
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext

from database.database import async_session
from database.crud import get_user, create_user
from keyboards.reply import get_main_keyboard
from keyboards.inline import get_role_keyboard, get_tags_keyboard, get_skip_photo_keyboard
from states.states import RegistrationStates
from utils.formatters import format_profile

router = Router()


@router.message(F.text == "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
async def start_registration(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    async with async_session() as session:
        user = await get_user(session, str(message.from_user.id))

        if user:
            await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
            return

    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –≤–∞—à—É –∞–Ω–∫–µ—Ç—É.\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:",
        reply_markup=get_role_keyboard()
    )
    await state.set_state(RegistrationStates.choosing_role)


@router.callback_query(StateFilter(RegistrationStates.choosing_role))
async def process_role_choice(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏"""
    role = "student" if callback.data == "role_student" else "mentor"
    await state.update_data(role=role)

    await callback.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {'–°—Ç—É–¥–µ–Ω—Ç' if role == 'student' else '–ú–µ–Ω—Ç–æ—Ä'}\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:"
    )
    await state.set_state(RegistrationStates.entering_name)


@router.message(StateFilter(RegistrationStates.entering_name))
async def process_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏"""
    await state.update_data(name=message.text)

    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ.\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):"
    )
    await state.set_state(RegistrationStates.entering_description)


@router.message(StateFilter(RegistrationStates.entering_description))
async def process_description(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è"""
    description = None if message.text == "-" else message.text
    await state.update_data(description=description)

    data = await state.get_data()
    if data['role'] == 'student':
        await message.answer(
            "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –∫—É—Ä—Å –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è:"
        )
        await state.set_state(RegistrationStates.entering_course)
    else:
        await message.answer(
            "–°–∫–æ–ª—å–∫–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤—ã —Ä–µ–∞–ª–∏–∑–æ–≤–∞–ª–∏? –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:"
        )
        await state.set_state(RegistrationStates.entering_projects_count)


@router.message(StateFilter(RegistrationStates.entering_course))
async def process_course(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—É—Ä—Å–∞ (–¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤)"""
    await state.update_data(course_info=message.text)

    await message.answer(
        "–°–∫–æ–ª—å–∫–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤—ã —Ä–µ–∞–ª–∏–∑–æ–≤–∞–ª–∏? –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:"
    )
    await state.set_state(RegistrationStates.entering_projects_count)


@router.message(StateFilter(RegistrationStates.entering_projects_count))
async def process_projects_count(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤"""
    try:
        count = int(message.text)
        await state.update_data(projects_count=count)

        await message.answer(
            "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ.\n"
            "–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ:",
            reply_markup=get_tags_keyboard()
        )
        await state.update_data(tags=[])
        await state.set_state(RegistrationStates.choosing_tags)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")


@router.callback_query(StateFilter(RegistrationStates.choosing_tags))
async def process_tag_choice(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π"""
    if callback.data == "tags_done":
        data = await state.get_data()
        if not data.get('tags'):
            await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é!", show_alert=True)
            return

        await callback.message.edit_text(
            f"–í—ã–±—Ä–∞–Ω–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π: {len(data['tags'])}\n\n"
            "–ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:",
            reply_markup=get_skip_photo_keyboard()
        )
        await state.set_state(RegistrationStates.entering_photo)
    elif callback.data.startswith("tag_"):
        tag = callback.data[4:]
        data = await state.get_data()
        tags = data.get('tags', [])

        if tag in tags:
            tags.remove(tag)
        else:
            tags.append(tag)

        await state.update_data(tags=tags)
        await callback.message.edit_reply_markup(reply_markup=get_tags_keyboard(tags))


@router.message(StateFilter(RegistrationStates.entering_photo), F.photo)
async def process_photo(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ"""
    photo_id = message.photo[-1].file_id
    await state.update_data(photo_url=photo_id)
    await complete_registration(message, state)


@router.callback_query(StateFilter(RegistrationStates.entering_photo), F.data == "skip_photo")
async def skip_photo(callback: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ —Ñ–æ—Ç–æ"""
    await complete_registration(callback, state)


async def complete_registration(source, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    data = await state.get_data()

    if isinstance(source, types.CallbackQuery):
        tg_id = source.from_user.id
        message = source.message
    else:
        tg_id = source.from_user.id
        message = source

    async with async_session() as session:
        user = await create_user(
            session,
            str(tg_id),
            data['role'],
            data
        )

        await message.answer(
            "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞:\n{format_profile(user)}\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫!",
            reply_markup=get_main_keyboard(True),
            parse_mode="HTML"
        )

    await state.clear()
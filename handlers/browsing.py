"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–Ω–∫–µ—Ç
"""
from aiogram import types, F, Router
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext

from database.database import async_session
from database.crud import get_user, get_next_profile, create_like
from keyboards.inline import get_profile_keyboard, get_main_menu_keyboard
from states.states import BrowsingStates
from utils.formatters import format_profile
from bot import bot

router = Router()


@router.callback_query(F.data == "browse_profiles")
async def start_browsing(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç"""
    async with async_session() as session:
        user = await get_user(session, str(callback.from_user.id))

        if not user:
            await callback.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!", show_alert=True)
            return

        next_profile = await get_next_profile(session, str(callback.from_user.id))

        if not next_profile:
            await callback.message.edit_text(
                "üòî –ê–Ω–∫–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–π—Ç–∏ –ø–æ–∑–∂–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã.\n\n"
                "<i>üí° –°–æ–≤–µ—Ç: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /reset —á—Ç–æ–±—ã —Å–±—Ä–æ—Å–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã –∑–∞–Ω–æ–≤–æ</i>",
                reply_markup=get_main_menu_keyboard(),
                parse_mode="HTML"
            )
            await callback.answer()
            return

        profile_text = format_profile(next_profile)

        if next_profile.photo_url:
            await callback.message.delete()
            await callback.message.answer_photo(
                photo=next_profile.photo_url,
                caption=profile_text,
                reply_markup=get_profile_keyboard(),
                parse_mode="HTML"
            )
        else:
            await callback.message.edit_text(
                profile_text,
                reply_markup=get_profile_keyboard(),
                parse_mode="HTML"
            )

        await state.update_data(current_profile_id=next_profile.id)
        await state.set_state(BrowsingStates.viewing_profiles)
        await callback.answer()


@router.callback_query(StateFilter(BrowsingStates.viewing_profiles))
async def handle_profile_action(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –ø—Ä–æ—Ñ–∏–ª–µ–º"""
    if callback.data == "main_menu":
        await callback.message.delete()
        await callback.message.answer(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_main_menu_keyboard()
        )
        await state.clear()
        await callback.answer()
        return

    data = await state.get_data()
    current_profile_id = data.get('current_profile_id')

    async with async_session() as session:
        if callback.data == "like":
            is_mutual, liked_user = await create_like(
                session,
                str(callback.from_user.id),
                current_profile_id
            )

            if is_mutual and liked_user:
                # –ü–æ–ª—É—á–∞–µ–º –ª–∞–π–∫–µ—Ä–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                liker = await get_user(session, str(callback.from_user.id))

                await callback.answer("‚ù§Ô∏è –≠—Ç–æ –≤–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫! –û–±–æ–∏–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!", show_alert=True)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                try:
                    mutual_text = (
                        f"üéâ <b>–£ –≤–∞—Å –≤–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫!</b>\n\n"
                        f"{format_profile(liker)}\n"
                        f"–ù–∞–ø–∏—à–∏—Ç–µ –ø–µ—Ä–≤—ã–º: @{callback.from_user.username or 'username_not_set'}"
                    )
                    await bot.send_message(liked_user.telegram_id, mutual_text, parse_mode="HTML")

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    current_user_text = (
                        f"üéâ <b>–£ –≤–∞—Å –≤–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫!</b>\n\n"
                        f"{format_profile(liked_user)}\n"
                        f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ!"
                    )
                    await callback.message.answer(current_user_text, parse_mode="HTML")
                except:
                    pass  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞
            else:
                await callback.answer("‚ù§Ô∏è –õ–∞–π–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

        elif callback.data == "skip":
            await callback.answer("–ü—Ä–æ–ø—É—Å–∫–∞–µ–º...")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å
        next_profile = await get_next_profile(session, str(callback.from_user.id))

        if not next_profile:
            if callback.message.photo:
                await callback.message.delete()
                await callback.message.answer(
                    "üòî –ê–Ω–∫–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–π—Ç–∏ –ø–æ–∑–∂–µ.",
                    reply_markup=get_main_menu_keyboard()
                )
            else:
                await callback.message.edit_text(
                    "üòî –ê–Ω–∫–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–π—Ç–∏ –ø–æ–∑–∂–µ.",
                    reply_markup=get_main_menu_keyboard()
                )
            await state.clear()
            await callback.answer()
            return

        profile_text = format_profile(next_profile)

        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –∏–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å —Å —Ñ–æ—Ç–æ - —É–¥–∞–ª—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
        if callback.message.photo or next_profile.photo_url:
            await callback.message.delete()
            if next_profile.photo_url:
                await callback.message.answer_photo(
                    photo=next_profile.photo_url,
                    caption=profile_text,
                    reply_markup=get_profile_keyboard(),
                    parse_mode="HTML"
                )
            else:
                await callback.message.answer(
                    profile_text,
                    reply_markup=get_profile_keyboard(),
                    parse_mode="HTML"
                )
        else:
            # –ï—Å–ª–∏ –æ–±–∞ –±–µ–∑ —Ñ–æ—Ç–æ - –ø—Ä–æ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            await callback.message.edit_text(
                profile_text,
                reply_markup=get_profile_keyboard(),
                parse_mode="HTML"
            )

        await state.update_data(current_profile_id=next_profile.id)
        await callback.answer()